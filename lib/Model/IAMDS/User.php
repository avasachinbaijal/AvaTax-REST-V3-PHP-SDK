<?php
/**
 * User
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2022 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * foundation
 *
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\IAMDS
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2022 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @version    2.4.33
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\IAMDS;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * User Class Doc Comment
 *
 * @category Class
 * @description Representation of an User
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'external_id' => 'string',
        'user_name' => 'string',
        'organization' => '\Avalara\SDK\Model\IAMDS\Reference',
        'name' => 'object',
        'display_name' => 'string',
        'nick_name' => 'string',
        'profile_url' => 'string',
        'title' => 'string',
        'user_type' => 'string',
        'preferred_language' => 'string',
        'locale' => 'string',
        'timezone' => 'string',
        'active' => 'bool',
        'password' => 'string',
        'emails' => 'object[]',
        'phone_numbers' => 'object[]',
        'addresses' => 'object[]',
        'default_tenant' => '\Avalara\SDK\Model\IAMDS\Reference',
        'custom_claims' => 'object[]',
        'id' => 'string',
        'meta' => '\Avalara\SDK\Model\IAMDS\InstanceMeta',
        'aspects' => '\Avalara\SDK\Model\IAMDS\Aspect[]',
        'tags' => '\Avalara\SDK\Model\IAMDS\Tag[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'external_id' => null,
        'user_name' => null,
        'organization' => null,
        'name' => null,
        'display_name' => null,
        'nick_name' => null,
        'profile_url' => 'uri',
        'title' => null,
        'user_type' => null,
        'preferred_language' => null,
        'locale' => null,
        'timezone' => null,
        'active' => null,
        'password' => 'password',
        'emails' => null,
        'phone_numbers' => null,
        'addresses' => null,
        'default_tenant' => null,
        'custom_claims' => null,
        'id' => null,
        'meta' => null,
        'aspects' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_id' => 'externalId',
        'user_name' => 'userName',
        'organization' => 'organization',
        'name' => 'name',
        'display_name' => 'displayName',
        'nick_name' => 'nickName',
        'profile_url' => 'profileUrl',
        'title' => 'title',
        'user_type' => 'userType',
        'preferred_language' => 'preferredLanguage',
        'locale' => 'locale',
        'timezone' => 'timezone',
        'active' => 'active',
        'password' => 'password',
        'emails' => 'emails',
        'phone_numbers' => 'phoneNumbers',
        'addresses' => 'addresses',
        'default_tenant' => 'defaultTenant',
        'custom_claims' => 'customClaims',
        'id' => 'id',
        'meta' => 'meta',
        'aspects' => 'aspects',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_id' => 'setExternalId',
        'user_name' => 'setUserName',
        'organization' => 'setOrganization',
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'nick_name' => 'setNickName',
        'profile_url' => 'setProfileUrl',
        'title' => 'setTitle',
        'user_type' => 'setUserType',
        'preferred_language' => 'setPreferredLanguage',
        'locale' => 'setLocale',
        'timezone' => 'setTimezone',
        'active' => 'setActive',
        'password' => 'setPassword',
        'emails' => 'setEmails',
        'phone_numbers' => 'setPhoneNumbers',
        'addresses' => 'setAddresses',
        'default_tenant' => 'setDefaultTenant',
        'custom_claims' => 'setCustomClaims',
        'id' => 'setId',
        'meta' => 'setMeta',
        'aspects' => 'setAspects',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_id' => 'getExternalId',
        'user_name' => 'getUserName',
        'organization' => 'getOrganization',
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'nick_name' => 'getNickName',
        'profile_url' => 'getProfileUrl',
        'title' => 'getTitle',
        'user_type' => 'getUserType',
        'preferred_language' => 'getPreferredLanguage',
        'locale' => 'getLocale',
        'timezone' => 'getTimezone',
        'active' => 'getActive',
        'password' => 'getPassword',
        'emails' => 'getEmails',
        'phone_numbers' => 'getPhoneNumbers',
        'addresses' => 'getAddresses',
        'default_tenant' => 'getDefaultTenant',
        'custom_claims' => 'getCustomClaims',
        'id' => 'getId',
        'meta' => 'getMeta',
        'aspects' => 'getAspects',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['user_name'] = $data['user_name'] ?? null;
        $this->container['organization'] = $data['organization'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['nick_name'] = $data['nick_name'] ?? null;
        $this->container['profile_url'] = $data['profile_url'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['user_type'] = $data['user_type'] ?? null;
        $this->container['preferred_language'] = $data['preferred_language'] ?? null;
        $this->container['locale'] = $data['locale'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['emails'] = $data['emails'] ?? null;
        $this->container['phone_numbers'] = $data['phone_numbers'] ?? null;
        $this->container['addresses'] = $data['addresses'] ?? null;
        $this->container['default_tenant'] = $data['default_tenant'] ?? null;
        $this->container['custom_claims'] = $data['custom_claims'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['meta'] = $data['meta'] ?? null;
        $this->container['aspects'] = $data['aspects'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_name'] === null) {
            $invalidProperties[] = "'user_name' can't be null";
        }
        if ($this->container['organization'] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        if ($this->container['emails'] === null) {
            $invalidProperties[] = "'emails' can't be null";
        }
        if ((count($this->container['emails']) < 1)) {
            $invalidProperties[] = "invalid value for 'emails', number of items must be greater than or equal to 1.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Identifier for the user in external systems (clients). The external systems manage this
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name Human readable unique identifier of the user, typically used to authenticate with an identity provider
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Avalara\SDK\Model\IAMDS\Reference
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Avalara\SDK\Model\IAMDS\Reference $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets name
     *
     * @return object|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param object|null $name The components of the user's real name.  Providers MAY return just the full name as a single string in the formatted sub-attribute, or they MAY return just the individual component attributes using the other sub-attributes, or they MAY return both.  If both variants are returned, they SHOULD be describing the same name, with the formatted name indicating how the component attributes should be combined.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name The name of the User, suitable for display to end-users.  The name SHOULD be the full name of the User being described, if known
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string|null $nick_name The casual way to address the user in real life, e.g., 'Bob' or 'Bobby' instead of 'Robert'.  This attribute SHOULD NOT be used to represent a User's username (e.g., 'bjensen' or 'mpepperidge')
     *
     * @return self
     */
    public function setNickName($nick_name)
    {
        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets profile_url
     *
     * @return string|null
     */
    public function getProfileUrl()
    {
        return $this->container['profile_url'];
    }

    /**
     * Sets profile_url
     *
     * @param string|null $profile_url A fully qualified URL pointing to a page representing the User's online profile
     *
     * @return self
     */
    public function setProfileUrl($profile_url)
    {
        $this->container['profile_url'] = $profile_url;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The user's title, such as \"Vice President.\"
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets user_type
     *
     * @return string|null
     */
    public function getUserType()
    {
        return $this->container['user_type'];
    }

    /**
     * Sets user_type
     *
     * @param string|null $user_type Used to identify the relationship between the organization and the user.  Typical values used might be 'Contractor', 'Employee', 'Intern', 'Temp', 'External', and 'Unknown', but any value may be used
     *
     * @return self
     */
    public function setUserType($user_type)
    {
        $this->container['user_type'] = $user_type;

        return $this;
    }

    /**
     * Gets preferred_language
     *
     * @return string|null
     */
    public function getPreferredLanguage()
    {
        return $this->container['preferred_language'];
    }

    /**
     * Sets preferred_language
     *
     * @param string|null $preferred_language Indicates the User's preferred written or spoken language.  Generally used for selecting a localized user interface; e.g., 'en_US' specifies the language English and country US
     *
     * @return self
     */
    public function setPreferredLanguage($preferred_language)
    {
        $this->container['preferred_language'] = $preferred_language;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale Used to indicate the User's default location for purposes of localizing items such as currency, date time format, or numerical representations
     *
     * @return self
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone The User's time zone in the 'Olson' time zone database format, e.g., 'America/Los_Angeles'
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active A Boolean value indicating the User's administrative status
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password The User's cleartext password.  This attribute is intended to be used as a means to specify an initial password when creating a new User or to reset an existing User's password
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return object[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param object[] $emails A List of email addresses associated with the user
     *
     * @return self
     */
    public function setEmails($emails)
    {


        if ((count($emails) < 1)) {
            throw new \InvalidArgumentException('invalid length for $emails when calling User., number of items must be greater than or equal to 1.');
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets phone_numbers
     *
     * @return object[]|null
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     *
     * @param object[]|null $phone_numbers A List of phone numbers associated with the user
     *
     * @return self
     */
    public function setPhoneNumbers($phone_numbers)
    {
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return object[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param object[]|null $addresses A physical mailing address for this User, as described in (address Element). Canonical Type Values of work, home, and other. The value attribute is a complex type with the following sub-attributes
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets default_tenant
     *
     * @return \Avalara\SDK\Model\IAMDS\Reference|null
     */
    public function getDefaultTenant()
    {
        return $this->container['default_tenant'];
    }

    /**
     * Sets default_tenant
     *
     * @param \Avalara\SDK\Model\IAMDS\Reference|null $default_tenant default_tenant
     *
     * @return self
     */
    public function setDefaultTenant($default_tenant)
    {
        $this->container['default_tenant'] = $default_tenant;

        return $this;
    }

    /**
     * Gets custom_claims
     *
     * @return object[]|null
     */
    public function getCustomClaims()
    {
        return $this->container['custom_claims'];
    }

    /**
     * Sets custom_claims
     *
     * @param object[]|null $custom_claims Custom claims that are returned along with a requested scope during authentication
     *
     * @return self
     */
    public function setCustomClaims($custom_claims)
    {
        $this->container['custom_claims'] = $custom_claims;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for the Object
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \Avalara\SDK\Model\IAMDS\InstanceMeta|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \Avalara\SDK\Model\IAMDS\InstanceMeta|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets aspects
     *
     * @return \Avalara\SDK\Model\IAMDS\Aspect[]|null
     */
    public function getAspects()
    {
        return $this->container['aspects'];
    }

    /**
     * Sets aspects
     *
     * @param \Avalara\SDK\Model\IAMDS\Aspect[]|null $aspects Identifier of the Resource (if any) in other systems
     *
     * @return self
     */
    public function setAspects($aspects)
    {
        $this->container['aspects'] = $aspects;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Avalara\SDK\Model\IAMDS\Tag[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Avalara\SDK\Model\IAMDS\Tag[]|null $tags User defined tags in the form of key:value pair
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


