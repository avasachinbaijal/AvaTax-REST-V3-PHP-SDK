<?php
/**
 * App
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/*
 * AvaTax Software Development Kit for PHP
 *
 * (c) 2004-2022 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * foundation
 *
 * Platform foundation consists of services on top of which the Avalara Compliance Cloud platform is built. These services are foundational and provide functionality such as common organization, tenant and user management for the rest of the compliance platform.
 *
 * @category   Avalara client libraries
 * @package    Avalara\SDK\API\IAMDS
 * @author     Sachin Baijal <sachin.baijal@avalara.com>
 * @author     Jonathan Wenger <jonathan.wenger@avalara.com>
 * @copyright  2004-2022 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @version    2.4.33
 * @link       https://github.com/avadev/AvaTax-REST-V3-PHP-SDK

 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Avalara\SDK\Model\IAMDS;

use \ArrayAccess;
use \Avalara\SDK\ObjectSerializer;
use \Avalara\SDK\Model\ModelInterface;
/**
 * App Class Doc Comment
 *
 * @category Class
 * @description An App represents any software package that intends to interact with Avalara Compliance Cloud
 * @package  Avalara\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class App implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'App';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_name' => 'string',
        'type' => 'string',
        'organization' => '\Avalara\SDK\Model\IAMDS\Reference',
        'is_tenant_agnostic' => 'bool',
        'is_org_agnostic' => 'bool',
        'tenants' => 'object[]',
        'client_id' => 'string',
        'redirect_uris' => 'string[]',
        'grants' => '\Avalara\SDK\Model\IAMDS\Reference[]',
        'id' => 'string',
        'meta' => '\Avalara\SDK\Model\IAMDS\InstanceMeta',
        'aspects' => '\Avalara\SDK\Model\IAMDS\Aspect[]',
        'tags' => '\Avalara\SDK\Model\IAMDS\Tag[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'display_name' => null,
        'type' => null,
        'organization' => null,
        'is_tenant_agnostic' => null,
        'is_org_agnostic' => null,
        'tenants' => null,
        'client_id' => null,
        'redirect_uris' => null,
        'grants' => null,
        'id' => null,
        'meta' => null,
        'aspects' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'displayName',
        'type' => 'type',
        'organization' => 'organization',
        'is_tenant_agnostic' => 'isTenantAgnostic',
        'is_org_agnostic' => 'isOrgAgnostic',
        'tenants' => 'tenants',
        'client_id' => 'clientId',
        'redirect_uris' => 'redirectUris',
        'grants' => 'grants',
        'id' => 'id',
        'meta' => 'meta',
        'aspects' => 'aspects',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'type' => 'setType',
        'organization' => 'setOrganization',
        'is_tenant_agnostic' => 'setIsTenantAgnostic',
        'is_org_agnostic' => 'setIsOrgAgnostic',
        'tenants' => 'setTenants',
        'client_id' => 'setClientId',
        'redirect_uris' => 'setRedirectUris',
        'grants' => 'setGrants',
        'id' => 'setId',
        'meta' => 'setMeta',
        'aspects' => 'setAspects',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'type' => 'getType',
        'organization' => 'getOrganization',
        'is_tenant_agnostic' => 'getIsTenantAgnostic',
        'is_org_agnostic' => 'getIsOrgAgnostic',
        'tenants' => 'getTenants',
        'client_id' => 'getClientId',
        'redirect_uris' => 'getRedirectUris',
        'grants' => 'getGrants',
        'id' => 'getId',
        'meta' => 'getMeta',
        'aspects' => 'getAspects',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_SPA = 'spa';
    const TYPE_WEB = 'web';
    const TYPE_NATIVE = 'native';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SPA,
            self::TYPE_WEB,
            self::TYPE_NATIVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['organization'] = $data['organization'] ?? null;
        $this->container['is_tenant_agnostic'] = $data['is_tenant_agnostic'] ?? false;
        $this->container['is_org_agnostic'] = $data['is_org_agnostic'] ?? false;
        $this->container['tenants'] = $data['tenants'] ?? null;
        $this->container['client_id'] = $data['client_id'] ?? null;
        $this->container['redirect_uris'] = $data['redirect_uris'] ?? null;
        $this->container['grants'] = $data['grants'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['meta'] = $data['meta'] ?? null;
        $this->container['aspects'] = $data['aspects'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['organization'] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name Name of the App/Service
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of application
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Avalara\SDK\Model\IAMDS\Reference
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Avalara\SDK\Model\IAMDS\Reference $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets is_tenant_agnostic
     *
     * @return bool|null
     */
    public function getIsTenantAgnostic()
    {
        return $this->container['is_tenant_agnostic'];
    }

    /**
     * Sets is_tenant_agnostic
     *
     * @param bool|null $is_tenant_agnostic Whether the App is allowed to access information across all Tenants within its Organization
     *
     * @return self
     */
    public function setIsTenantAgnostic($is_tenant_agnostic)
    {
        $this->container['is_tenant_agnostic'] = $is_tenant_agnostic;

        return $this;
    }

    /**
     * Gets is_org_agnostic
     *
     * @return bool|null
     */
    public function getIsOrgAgnostic()
    {
        return $this->container['is_org_agnostic'];
    }

    /**
     * Sets is_org_agnostic
     *
     * @param bool|null $is_org_agnostic Whether the App is allowed to access information across all Organizations and Tenants
     *
     * @return self
     */
    public function setIsOrgAgnostic($is_org_agnostic)
    {
        $this->container['is_org_agnostic'] = $is_org_agnostic;

        return $this;
    }

    /**
     * Gets tenants
     *
     * @return object[]|null
     */
    public function getTenants()
    {
        return $this->container['tenants'];
    }

    /**
     * Sets tenants
     *
     * @param object[]|null $tenants tenants
     *
     * @return self
     */
    public function setTenants($tenants)
    {
        $this->container['tenants'] = $tenants;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id The clientId used for OAuth flows
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets redirect_uris
     *
     * @return string[]|null
     */
    public function getRedirectUris()
    {
        return $this->container['redirect_uris'];
    }

    /**
     * Sets redirect_uris
     *
     * @param string[]|null $redirect_uris Defines the registered redirect URIs for the app - determines where tokens are sent after authentication
     *
     * @return self
     */
    public function setRedirectUris($redirect_uris)
    {
        $this->container['redirect_uris'] = $redirect_uris;

        return $this;
    }

    /**
     * Gets grants
     *
     * @return \Avalara\SDK\Model\IAMDS\Reference[]|null
     */
    public function getGrants()
    {
        return $this->container['grants'];
    }

    /**
     * Sets grants
     *
     * @param \Avalara\SDK\Model\IAMDS\Reference[]|null $grants List of grants associated with the App
     *
     * @return self
     */
    public function setGrants($grants)
    {
        $this->container['grants'] = $grants;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identifier for the Object
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \Avalara\SDK\Model\IAMDS\InstanceMeta|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \Avalara\SDK\Model\IAMDS\InstanceMeta|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets aspects
     *
     * @return \Avalara\SDK\Model\IAMDS\Aspect[]|null
     */
    public function getAspects()
    {
        return $this->container['aspects'];
    }

    /**
     * Sets aspects
     *
     * @param \Avalara\SDK\Model\IAMDS\Aspect[]|null $aspects Identifier of the Resource (if any) in other systems
     *
     * @return self
     */
    public function setAspects($aspects)
    {
        $this->container['aspects'] = $aspects;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Avalara\SDK\Model\IAMDS\Tag[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Avalara\SDK\Model\IAMDS\Tag[]|null $tags User defined tags in the form of key:value pair
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset):bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset):mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value):void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset):void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize():mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString():string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue():string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


